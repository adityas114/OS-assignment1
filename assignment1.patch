diff -urN linux-3.13/arch/x86/syscalls/syscall_64.tbl linux-3.13-assignment1/arch/x86/syscalls/syscall_64.tbl
--- linux-3.13/arch/x86/syscalls/syscall_64.tbl	2014-01-19 18:40:07.000000000 -0800
+++ linux-3.13-assignment1/arch/x86/syscalls/syscall_64.tbl	2018-02-10 03:00:43.168013443 -0800
@@ -320,6 +320,8 @@
 311	64	process_vm_writev	sys_process_vm_writev
 312	common	kcmp			sys_kcmp
 313	common	finit_module		sys_finit_module
+314	64	hello			sys_hello
+315	64	sh_task_info		sys_sh_task_info
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -urN linux-3.13/hello/hello.c linux-3.13-assignment1/hello/hello.c
--- linux-3.13/hello/hello.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-3.13-assignment1/hello/hello.c	2018-02-08 04:53:34.451940177 -0800
@@ -0,0 +1,6 @@
+#include <linux/kernel.h>
+
+asmlinkage long sys_hello(void) {
+	printk("Hello world\n");
+	return 0;
+}
diff -urN linux-3.13/hello/Makefile linux-3.13-assignment1/hello/Makefile
--- linux-3.13/hello/Makefile	1969-12-31 16:00:00.000000000 -0800
+++ linux-3.13-assignment1/hello/Makefile	2018-02-11 05:58:39.842327960 -0800
@@ -0,0 +1 @@
+obj-y := hello.o
diff -urN linux-3.13/include/linux/syscalls.h linux-3.13-assignment1/include/linux/syscalls.h
--- linux-3.13/include/linux/syscalls.h	2014-01-19 18:40:07.000000000 -0800
+++ linux-3.13-assignment1/include/linux/syscalls.h	2018-02-10 06:35:44.271096012 -0800
@@ -847,4 +847,6 @@
 asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
 			 unsigned long idx1, unsigned long idx2);
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+asmlinkage long sys_hello(void);
+asmlinkage long sys_sh_task_info(long pid, char *filename);
 #endif
diff -urN linux-3.13/kernel/sys.c linux-3.13-assignment1/kernel/sys.c
--- linux-3.13/kernel/sys.c	2014-01-19 18:40:07.000000000 -0800
+++ linux-3.13-assignment1/kernel/sys.c	2018-02-15 09:32:37.407926635 -0800
@@ -2160,3 +2160,110 @@
 	return 0;
 }
 #endif /* CONFIG_COMPAT */
+
+// Referred "https://stackoverflow.com/questions/20719713/how-can-i-write-to-tty-from-a-kernel-module"
+
+SYSCALL_DEFINE2(sh_task_info, long, pid, char*, filename) {
+	struct task_struct *proc;
+	struct tty_struct *tty;
+	int flag = 0;
+	long errno = 0;
+
+	for_each_process(proc) {
+		if (proc != NULL) {
+			long tempPID = (long) task_pid_nr(proc);
+
+			if (tempPID == pid) {
+				char str[900];
+				int fd;
+				mm_segment_t oldFS;
+
+				flag = 1;
+
+				sprintf(str,
+					"state: %ld\r\n"
+					"on_cpu: %d\r\n"
+					"prio: %d\r\n"
+					"static_prio: %d\r\n"
+					"normal_prio: %d\r\n"
+					"rt_priority: %u\r\n\r\n"
+					"se:\r\n"
+					"on_rq: %u\r\n"
+					"exec_start: %llu\r\n"
+					"sum_exec_runtime: %llu\r\n"
+					"vruntime: %llu\r\n"
+					"prev_sum_exec_runtime: %llu\r\n"
+					"nr_migrations: %llu\r\n\r\n"
+					"pid: %d\r\n"
+					"tgid: %d\r\n"
+					"blocked: %lu\r\n"
+					"real_blocked: %lu\r\n\r\n"
+					"thread:\r\n"
+					"sp0: %lu\r\n"
+					"sp: %lu\r\n"
+					"gs: %lu\r\n"
+					"debugreg6: %lu\r\n"
+					"ptrace_dr7: %lu\r\n"
+					"cr2: %lu\r\n"
+					"trap_nr: %lu\r\n"
+					"error_code: %lu\r\n",
+					proc -> state,
+					proc -> on_cpu,
+					proc -> prio,
+					proc -> static_prio,
+					proc -> normal_prio,
+					proc -> rt_priority,
+					proc -> se.on_rq,
+					proc -> se.exec_start,
+					proc -> se.sum_exec_runtime,
+					proc -> se.vruntime,
+					proc -> se.prev_sum_exec_runtime,
+					proc -> se.nr_migrations,
+					proc -> pid,
+					proc -> tgid,
+					proc -> blocked.sig[0],
+					proc -> real_blocked.sig[0],
+					proc -> thread.sp0,
+					proc -> thread.sp,
+					proc -> thread.gs,
+					proc -> thread.debugreg6,
+					proc -> thread.ptrace_dr7,
+					proc -> thread.cr2,
+					proc -> thread.trap_nr,
+					proc -> thread.error_code
+				);
+
+				fd = sys_open(filename, O_WRONLY | O_TRUNC, 0666);
+
+				oldFS = get_fs();
+				set_fs(KERNEL_DS);
+
+				if (fd >= 0) {
+					sys_write(fd, str, strlen(str));
+					sys_close(fd);
+				}
+				else {
+					errno = -ENOENT;
+					break;
+				}
+
+				set_fs(oldFS);
+
+				tty = get_current_tty();
+				if (tty != NULL) {
+					(tty -> driver -> ops -> write)(tty, str, strlen(str));
+				}
+				else {
+					errno = -ENOTTY;
+				}
+			}
+		}
+	}
+
+	if (flag == 0) {
+		errno = -ESRCH;
+	}
+
+	printk("errno: %ld\n", errno);
+	return errno;
+}
diff -urN linux-3.13/Makefile linux-3.13-assignment1/Makefile
--- linux-3.13/Makefile	2014-01-19 18:40:07.000000000 -0800
+++ linux-3.13-assignment1/Makefile	2018-02-08 04:56:19.623937051 -0800
@@ -754,8 +754,8 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
-
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ hello/
+  
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
 		     $(net-y) $(net-m) $(libs-y) $(libs-m)))
diff -urN linux-3.13/security/tomoyo/builtin-policy.h linux-3.13-assignment1/security/tomoyo/builtin-policy.h
--- linux-3.13/security/tomoyo/builtin-policy.h	1969-12-31 16:00:00.000000000 -0800
+++ linux-3.13-assignment1/security/tomoyo/builtin-policy.h	2018-02-14 02:03:10.752759390 -0800
@@ -0,0 +1,12 @@
+static char tomoyo_builtin_profile[] __initdata =
+"";
+static char tomoyo_builtin_exception_policy[] __initdata =
+"initialize_domain /sbin/modprobe from any\n"
+"initialize_domain /sbin/hotplug from any\n"
+"";
+static char tomoyo_builtin_domain_policy[] __initdata =
+"";
+static char tomoyo_builtin_manager[] __initdata =
+"";
+static char tomoyo_builtin_stat[] __initdata =
+"";
diff -urN linux-3.13/security/tomoyo/policy/exception_policy.conf linux-3.13-assignment1/security/tomoyo/policy/exception_policy.conf
--- linux-3.13/security/tomoyo/policy/exception_policy.conf	1969-12-31 16:00:00.000000000 -0800
+++ linux-3.13-assignment1/security/tomoyo/policy/exception_policy.conf	2018-02-14 02:02:57.352759644 -0800
@@ -0,0 +1,2 @@
+initialize_domain /sbin/modprobe from any
+initialize_domain /sbin/hotplug from any
